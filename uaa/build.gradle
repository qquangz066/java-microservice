plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.2.RELEASE'
    id "org.liquibase.gradle" version "2.0.1"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id 'com.bmuschko.docker-remote-api' version '4.4.1'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
}
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-all:2.1.0.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:2.1.0.RELEASE'
    runtimeOnly 'org.postgresql:postgresql'
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.security.oauth:spring-security-oauth2:2.3.4.RELEASE')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    liquibaseRuntime 'org.liquibase:liquibase-core:3.6.2'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'ch.qos.logback:logback-classic:1.2.3'
    developmentOnly("org.springframework.boot:spring-boot-devtools")
}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/changelog/db.changelog-master.yml'
            url 'jdbc:postgresql://db-postgres/postgres'
            username 'postgres'
            password 'postgres'
        }
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task copyDockerFiles(type: Copy, dependsOn: bootJar) {
    from project.bootJar.archivePath
    into "$buildDir/docker"
}

task createDockerfile(type: Dockerfile, dependsOn: copyDockerFiles) {
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:8-jre-alpine'
    workingDir '/srv'
    copyFile project.bootJar.archiveName, '.'
    entryPoint 'java'
    defaultCommand '-jar', project.bootJar.archiveName
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    inputDir = project.file('build/docker')
    tags.add('uaa:latest')
}
